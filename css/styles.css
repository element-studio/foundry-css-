/*
 * Foundry Core;
 *
 * Functions and dependencies which acts as the engine of Foundry
 */
/* --------------------------------
 *
 * FoundryCSS
 *
 * Based heavily on BEM principles, along with a smattering of inuitCSS / itCSS, Foundry CSS is Element Studio's
 * own CSS boilerplate for getting new user interfaces styled up quickly while keeping them looking swag, by
 * abstracting out the styling of commonly used patterns components.
 *
 * --------------------------------
 */
/*
 * Core
 * The Core contains Foundry's 'engine' - a collection of functions and helpers which is a dependency for nearly
 * every FoundryCSS UI module.
 */
/*
 * Color
 * The color function gives us a less verbose way of grabbing our color variables form our $color sass-map.
 */
/*
 * Fontsize
 * The fontsize function gives us a less verbose way of grabbing our font-size variables form our $font-sizes sass-map.
 */
/*
 * Fontweight
 * The fontweight function gives us a less verbose way of grabbing our font-weight variables form our $font-weights sass-map.
 */
/*
 * Heading Size
 * The fontsize function gives us a less verbose way of grabbing our font-size variables form our $font-sizes sass-map.
 */
/*
 * Lower Bound
 * Select the first item in a range 
 */
/*
 * Upper Bound
 * Select the last item in a range 
 */
/*
 * Process Font Size
 * 
 */
/*
 * Rhythm
 * The rhythm function takes our $document-rhythm variable and multiplies by a number
 * passed as an optional parameter.
 */
/*
 * Project Theme;
 *
 * Configures Foundry's UI styles - this should also pull in any seperate
 * per-module configuration files.
 */
/**
 * _theme.scss
 * Contains variables for cosmetic look-and-feel attributes such as colour and font declarations.
 * All variables are prefixed by type for organisation, and for easier identification when looking back through code later.
 *
 * 1. Document Setup
 * 2. Typography
 * 3. Colours
 * 4. Common Border Radii
 * 5. Layers
 *
 */
/*
 * 1. Document Setup
 *
 * Set the base font-size and line-height for the project, as well as establish a value for
 * rhythm and spacing.
 */
/*
 * 2. Typography
 *
 * Set font declarations, font-sizes and font-weights.
 *
 */
/*
 * 3. Colours
 *
 * Colours are stored in pairs in a SASS map - each pair contains a theme colour, as well
 * as a corresponding colour for use in text to ensure proper contrast.
 *
 * Gradients are stored in a seperate SASS map as they need to be accessed differently.
 *
 */
/*
 * 4. Common Border Radii
 *
 * Set any commonly used border-radius declarations.
 *
 */
/*
 * 5. Layers
 *
 * We store all z-index values in a SASS map under human-readable keys to avoid the usual
 * trial and error or 'z-index:9999' nonsense.
 *
 */
/**
 * 6. Breakpoints
 *
 * Foundry works mobile-first, so the majority of our media queries are based on min-width;
 * These breakpoints represent the lower bound of a media query or grid layout
 * Accessed via eg. `map-get($breakpoints, 'large')`
 */
/*
 * 7. Paths
 *
 * Commonly used paths for locating image assets, font files, etc.
 *
 */
/*
 * Foundry UI;
 *
 * Foundry's UI styles along with a default theme. The default theme provides
 * default values for any configuration not provided by the Project Theme.
 */
/* --------------------------------
 *
 * Foundry CSS
 *
 * Based heavily on BEM principles, along with a smattering of inuitCSS / itCSS, Foundry CSS is Element Studio's
 * own CSS boilerplate for getting new user interfaces styled up quickly while keeping them looking swag, by
 * abstracting out the styling of commonly used patterns components.
 *
 * --------------------------------
 */
/*
 * 1. Theme
 * Nearly everything within Foundry relies on a configuration file, we'll grab that next.
 */
/**
 * _theme.scss
 * Contains variables for cosmetic look-and-feel attributes such as colour and font declarations.
 * All variables are prefixed by type for organisation, and for easier identification when looking back through code later.
 *
 * 1. Document Setup
 * 2. Typography
 * 3. Colours
 * 4. Common Border Radii
 * 5. Layers
 * 6. Responsive breakpoints
 *
 */
/*
 * 1. Document Setup
 *
 * Set the base font-size and line-height for the project, as well as establish a value for
 * rhythm and spacing.
 */
/*
 * 2. Typography
 *
 * Set font declarations, font-sizes and font-weights.
 *
 */
/*
 * 3. Colours
 *
 * Colours are stored in pairs in a SASS map - each pair contains a theme colour, as well
 * as a corresponding colour for use in text to ensure proper contrast.
 *
 * Gradients are stored in a seperate SASS map as they need to be accessed differently.
 *
 */
/*
 * 4. Border
 *
 * Border based variables.
 *
 */
/*
 * 5. Layers
 *
 * We store all z-index values in a SASS map under human-readable keys to avoid the usual
 * trial and error 'z-index:9999' nonsense.
 *
 */
/**
 * 6. Breakpoints
 *
 * Foundry works mobile-first, so the majority of our media queries are based on min-width;
 * These breakpoints represent the lower bound of a media query or grid layout
 * Accessed via eg. `map-get($breakpoints, 'large')`
 */
/*
 * 7. Paths
 *
 * Commonly used paths for locating image assets, font files, etc.
 *
 */
/*
 * 2. Helpers
 * Useful gnomes that abstract fiddly bits of CSS into shorthand functions for us.
 */
/*
 * Ellipsis
 *
 * Applies an overflow to a text element, and a visible ellipsis.
 * Credit to Bourbon (www.bourbon.io).
 */
/*
 * Media Queries:
 * We use Foundation's method of setting up variables and mixins to control our breakpoints. Rather than use hard-coded breakpoints however,
 * we base our breakpoint ranges off of the $breakpoint variables declared in our _theme.scss
 *
 */
/*
 * Triangle
 *
 * Generates a CSS triangle with the required color and direction.
 * Credit to Bourbon (www.bourbon.io).
 */
/*
 * 3. Reset
 * A short CSS reset for levelling our playing field.
 */
/*
 * Generic:
 * Element selectors that form our little reset sheet.
 *
 */
* {
  box-sizing: border-box; }

:root {
  font-size: 16px;
  line-height: 1.6; }

html,
body {
  width: 100%;
  min-height: 100%;
  scroll-behavior: smooth; }

body,
p,
fieldset,
dialog {
  margin: 0; }

body {
  font-family: "museo-sans", Helvetica, Arial, sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #4a4a4a;
  background-color: #fafafa; }

h1,
h2,
h3,
h4,
h5,
h6 {
  margin-top: 0;
  margin-bottom: 1.5rem; }

h1 {
  font-size: 4rem; }

h2 {
  font-size: 3rem; }

h3 {
  font-size: 2rem; }

h4 {
  font-size: 1.5rem; }

h5 {
  font-size: 1.25rem; }

h6 {
  font-size: 1rem; }

p + p {
  margin-top: 0.8rem; }

a {
  background-color: transparent;
  color: inherit; }
  a:active, a:hover {
    outline: 0; }

strong {
  font-weight: 700; }

input,
button,
select,
option,
textarea {
  font-size: 100%;
  font-family: inherit; }

fieldset,
dialog {
  padding: 0;
  border: none; }

/* clears the 'X' from Internet Explorer */
input[type='search']::-ms-clear,
input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0; }

/* clears the 'X' from Chrome */
input[type='search']::-webkit-search-decoration,
input[type='search']::-webkit-search-cancel-button,
input[type='search']::-webkit-search-results-button,
input[type='search']::-webkit-search-results-decoration {
  display: none; }

/*
 * 4. Layout
 * Layout contains classes which have no aesthetic, but are purely concerned with helping to layout and
 * structure a page layout.
 */
/*
 * Breathe
 * A class to manage horizontal rhythm.
 */
/*
 * Flow Config
 *
 * 1. Sizes
 *
 */

.breathe > * + * {
  margin-left: 1.6rem; }

/* Sizes */

.breathe--small > * + * {
  margin-left: 0.8rem; }


.breathe--normal > * + * {
  margin-left: 1.6rem; }


.breathe--large > * + * {
  margin-left: 3.2rem; }

/*
 * Container:
 * Horizontally centers an element and constrains it to one of our $page-container widths 
 * from _theme.scss. This class only touches left and right margin and padding values to avoid
 * conflicts or inheritance issues with .wrapper or .flow classes.
 */
/*
 * Container Config
 *
 * 1. Sizes
 *
 */

.container {
  margin-left: auto;
  margin-right: auto;
  padding-left: 1.6rem;
  padding-right: 1.6rem;
  max-width: 72rem; }

/* Sizes */

.container--xsmall {
  max-width: 30rem; }


.container--small {
  max-width: 60rem; }


.container--normal {
  max-width: 72rem; }


.container--medium {
  max-width: 84rem; }


.container--large {
  max-width: 90rem; }

/* Modifiers */

.container--flush {
  padding-left: 0;
  padding-right: 0; }

/*
 * Flow
 * A class to manage vertical rhythm.
 */
/*
 * Flow Config
 *
 * 1. Sizes
 *
 */

.flow > * + * {
  margin-top: 3.2rem; }

/* Sizes */
.flow--small > * + * {
  margin-top: 1.6rem; }

.flow--normal > * + * {
  margin-top: 3.2rem; }

.flow--large > * + * {
  margin-top: 6.4rem; }

/*
 * Grid
 * If you're the kind of absolute madlad who likes to roll his own grid, here's the place to do it!
 */
/*
 * Grid Config
 *
 * 1. Use Foundation Grid
 * 2. Column Count
 * 3. Gutter Size
 * 4. Grid Breakpoints
 *
 */
/*
 * Wrappers:
 * Wrap an element in top and bottom padding.
 */
/*
 * Wrapper Config
 *
 * 1. Sizes
 *
 */

.wrapper {
  padding-top: 3rem;
  padding-bottom: 3rem; }

/* Sizes */

.wrapper--small {
  padding-top: 1.5rem;
  padding-bottom: 1.5rem; }


.wrapper--normal {
  padding-top: 3rem;
  padding-bottom: 3rem; }


.wrapper--medium {
  padding-top: 4rem;
  padding-bottom: 4rem; }


.wrapper--large {
  padding-top: 6rem;
  padding-bottom: 6rem; }

/* Modifiers */

.wrapper--top-only {
  padding-bottom: 0; }


.wrapper--bottom-only {
  padding-top: 0; }

/*
 * 5. Typography
 * Honestly there's no prizes for guessing what this is.
 */
.wysiwyg > * + * {
  margin-top: 1.6rem; }

/*
 * Typography Properties
 * Properties are small utility classes solely concerned with one aspect of typesetting at a time,
 * such as altering color or font-weight.
 */
.color--base {
  color: #4a4a4a; }

.color--canvas {
  color: #fafafa; }

.color--white {
  color: #ffffff; }

.color--alpha {
  color: #ea4d52; }

.color--beta {
  color: #638db4; }

.color--gamma {
  color: #3e5168; }

.color--dark {
  color: #777777; }

.color--mid {
  color: #9b9b9b; }

.color--light {
  color: #d8d8d8; }

.color--shade {
  color: #dedede; }

.color--success {
  color: #aad091; }

.color--warning {
  color: #efbc68; }

.color--error {
  color: #d17580; }

.color--info {
  color: #9cc9df; }

.color--facebook {
  color: #3b5998; }

.color--twitter {
  color: #1da1f2; }

.color--linkedin {
  color: #0077b5; }

.font-size--smallest {
  font-size: 10px; }

.font-size--small {
  font-size: 12px; }

.font-size--standard {
  font-size: 14px; }

.font-size--medium {
  font-size: 16px; }

.font-size--large {
  font-size: 20px; }

.font-size--largest {
  font-size: 36px; }

.font-weight--light {
  font-weight: 100; }

.font-weight--normal {
  font-weight: 400; }

.font-weight--semibold {
  font-weight: 500; }

.font-weight--bold {
  font-weight: 700; }

.font-family--main {
  font-family: "museo-sans", Helvetica, Arial, sans-serif; }

.font-family--alt {
  font-family: "adelle", Georgia, serif; }

/* Modifiers */
._has-subhead {
  margin-bottom: 0; }

/*
 * 6. Blocks
 * Blocks are small, flexible elements which only require a single class.
 */
/*
 * Avatar
 *
 * Ready-to-roll confiigurable shapes for user/profile images.
 */
/*
 * Avatar Config
 *
 * 1. Sizes
 * 2. Border Radius
 * 3. Shadows
 *
 */

.avatar {
  display: inline-block;
  width: 5rem;
  max-width: 100%;
  border-radius: 0.75rem; }

/* Sizes */

.avatar--small {
  width: 3rem; }


.avatar--normal {
  width: 5rem; }


.avatar--medium {
  width: 7.5rem; }


.avatar--large {
  width: 10rem; }

/*
 * Button:
 * A button is an inline-block element used to highlight actions in a UI. By default, a button will have a background-color
 * equal to the document $color-base, which will probably be dark, with white text.
 *
 */
/*
 * Button Config
 *
 * 1. Colors
 * 2. Border Radius
 * 3. Sizes
 * 4. Label Weight
 * 5. Label Leading
 *
 */

.button {
  display: inline-block;
  padding: 2rem 3rem;
  border-radius: 0.25rem;
  text-decoration: none;
  letter-spacing: 0.05em;
  font-weight: 700;
  cursor: pointer;
  text-align: center;
  border: 2px solid transparent;
  background-color: #4a4a4a;
  color: #ffffff; }

.button--bordered {
  border: 2px solid #4a4a4a;
  background-color: transparent;
  color: #4a4a4a; }

/* Colors */

.button--base {
  background-color: #4a4a4a;
  border-color: #4a4a4a; }


.button--bordered--base {
  background-color: transparent;
  border-color: #4a4a4a;
  color: #4a4a4a; }


.button--canvas {
  background-color: #fafafa;
  border-color: #fafafa;
  color: #4a4a4a; }


.button--bordered--canvas {
  background-color: transparent;
  border-color: #fafafa;
  color: #4a4a4a; }


.button--white {
  background-color: #ffffff;
  border-color: #ffffff;
  color: #4a4a4a; }


.button--bordered--white {
  background-color: transparent;
  border-color: #ffffff;
  color: #4a4a4a; }


.button--alpha {
  background-color: #ea4d52;
  border-color: #ea4d52;
  color: #4a4a4a; }


.button--bordered--alpha {
  background-color: transparent;
  border-color: #ea4d52;
  color: #4a4a4a; }


.button--beta {
  background-color: #638db4;
  border-color: #638db4;
  color: #4a4a4a; }


.button--bordered--beta {
  background-color: transparent;
  border-color: #638db4;
  color: #4a4a4a; }


.button--gamma {
  background-color: #3e5168;
  border-color: #3e5168; }


.button--bordered--gamma {
  background-color: transparent;
  border-color: #3e5168;
  color: #4a4a4a; }


.button--dark {
  background-color: #777777;
  border-color: #777777; }


.button--bordered--dark {
  background-color: transparent;
  border-color: #777777;
  color: #4a4a4a; }


.button--mid {
  background-color: #9b9b9b;
  border-color: #9b9b9b;
  color: #4a4a4a; }


.button--bordered--mid {
  background-color: transparent;
  border-color: #9b9b9b;
  color: #4a4a4a; }


.button--light {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
  color: #4a4a4a; }


.button--bordered--light {
  background-color: transparent;
  border-color: #d8d8d8;
  color: #4a4a4a; }


.button--shade {
  background-color: #dedede;
  border-color: #dedede;
  color: #4a4a4a; }


.button--bordered--shade {
  background-color: transparent;
  border-color: #dedede;
  color: #4a4a4a; }


.button--success {
  background-color: #aad091;
  border-color: #aad091;
  color: #4a4a4a; }


.button--bordered--success {
  background-color: transparent;
  border-color: #aad091;
  color: #4a4a4a; }


.button--warning {
  background-color: #efbc68;
  border-color: #efbc68;
  color: #4a4a4a; }


.button--bordered--warning {
  background-color: transparent;
  border-color: #efbc68;
  color: #4a4a4a; }


.button--error {
  background-color: #d17580;
  border-color: #d17580;
  color: #4a4a4a; }


.button--bordered--error {
  background-color: transparent;
  border-color: #d17580;
  color: #4a4a4a; }


.button--info {
  background-color: #9cc9df;
  border-color: #9cc9df;
  color: #4a4a4a; }


.button--bordered--info {
  background-color: transparent;
  border-color: #9cc9df;
  color: #4a4a4a; }


.button--facebook {
  background-color: #3b5998;
  border-color: #3b5998; }


.button--bordered--facebook {
  background-color: transparent;
  border-color: #3b5998;
  color: #4a4a4a; }


.button--twitter {
  background-color: #1da1f2;
  border-color: #1da1f2;
  color: #4a4a4a; }


.button--bordered--twitter {
  background-color: transparent;
  border-color: #1da1f2;
  color: #4a4a4a; }


.button--linkedin {
  background-color: #0077b5;
  border-color: #0077b5; }


.button--bordered--linkedin {
  background-color: transparent;
  border-color: #0077b5;
  color: #4a4a4a; }

/* Sizes */

.button--small {
  padding: 1.2rem 1.8rem; }


.button--normal {
  padding: 2rem 3rem; }


.button--medium {
  padding: 2.5rem 4.5rem; }


.button--large {
  padding: 2.66rem 6.5rem; }


.button--fullwidth {
  display: block;
  width: 100%; }


.button--bordered {
  background-color: transparent; }

/*
 * Card:
 * A card is a container, usually used in a list or collection of objects, used to
 * visually group and emphasise a group of elements. Can contain an image, stacked
 * horizontally or vertically.
 */
/*
 * Card Config
 *
 * 1. Background Colors
 * 2. Padding
 * 3. Border Radii
 * 4. Shadow
 *
 */

.card {
  border-radius: 0.4rem;
  padding: 2.4rem;
  box-shadow: 0 20px 30px 25px rgba(74, 74, 74, 0.125); }


.card--basic {
  padding: 0; }


.card__inner {
  padding: 2.4rem; }

/* Sizes */

.card--small {
  padding: 1.6rem; }


.card__inner--small {
  padding: 1; }


.card--normal {
  padding: 2.4rem; }


.card__inner--normal {
  padding: 1.5; }


.card--large {
  padding: 3.2rem; }


.card__inner--large {
  padding: 2; }

/*
 * Horizontal Rule:
 * Premade style for the classic <hr> element. Simple!
 */
/*
 * Horizontal Rule Config
 *
 * 1. Weights (Thickness)
 * 2. Widths
 * 3. Colours
 *
 */

.hr {
  border: none;
  margin: 1.6rem 0;
  height: 0.25rem;
  width: 12.5rem;
  background-color: #4a4a4a; }

/* Weights */

.hr--thin {
  height: 1px; }


.hr--normal {
  height: 0.25rem; }


.hr--thick {
  height: 0.66rem; }

/* Widths */

.hr--short {
  width: 7.5rem; }


.hr--normal {
  width: 12.5rem; }


.hr--fullwidth {
  width: 100%; }

/* Colors */

.hr--base {
  background-color: #4a4a4a; }


.hr--canvas {
  background-color: #fafafa; }


.hr--white {
  background-color: #ffffff; }


.hr--alpha {
  background-color: #ea4d52; }


.hr--beta {
  background-color: #638db4; }


.hr--gamma {
  background-color: #3e5168; }


.hr--dark {
  background-color: #777777; }


.hr--mid {
  background-color: #9b9b9b; }


.hr--light {
  background-color: #d8d8d8; }


.hr--shade {
  background-color: #dedede; }


.hr--success {
  background-color: #aad091; }


.hr--warning {
  background-color: #efbc68; }


.hr--error {
  background-color: #d17580; }


.hr--info {
  background-color: #9cc9df; }


.hr--facebook {
  background-color: #3b5998; }


.hr--twitter {
  background-color: #1da1f2; }


.hr--linkedin {
  background-color: #0077b5; }


.hr--centered {
  margin-left: auto;
  margin-right: auto; }

/*
 * Icon:
 * Utility classes to make working with SVG icons a little easier
 */
/*
 * Icon Config
 *
 * 1. Sizes
 * 2. Colours
 *
 */
.icon {
  width: 1em;
  height: 1em;
  display: inline-block;
  vertical-align: middle; }

/* Colors */
.icon--base {
  fill: #4a4a4a; }

.icon--canvas {
  fill: #fafafa; }

.icon--white {
  fill: #ffffff; }

.icon--alpha {
  fill: #ea4d52; }

.icon--beta {
  fill: #638db4; }

.icon--gamma {
  fill: #3e5168; }

.icon--dark {
  fill: #777777; }

.icon--mid {
  fill: #9b9b9b; }

.icon--light {
  fill: #d8d8d8; }

.icon--shade {
  fill: #dedede; }

.icon--success {
  fill: #aad091; }

.icon--warning {
  fill: #efbc68; }

.icon--error {
  fill: #d17580; }

.icon--info {
  fill: #9cc9df; }

.icon--facebook {
  fill: #3b5998; }

.icon--twitter {
  fill: #1da1f2; }

.icon--linkedin {
  fill: #0077b5; }

/* Colors */
.icon--small {
  font-size: 1rem; }

.icon--normal {
  font-size: 1.5rem; }

.icon--large {
  font-size: 2.25rem; }

.list--blank {
  list-style: none;
  margin: 0;
  padding: 0; }

.list--h > li {
  display: inline-block; }

/*
 * Responsive Embed:
 * A container to responsively embed media like videos and images
 *
 */
/*
 * Responsive Embed Config
 *
 * 1. Height
 *
 */

.responsive-embed {
  width: 100%;
  height: 0;
  position: relative;
  padding-bottom: 56.25%; }
  
  .responsive-embed > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }

/*
 * Tag:
 *
 * A tag can be used to highlight metadata such as a category or status.
 *
 */
/*
 * Tag Config
 *
 * 1. Colors
 * 2. Border Radius
 * 3. Sizes
 * 4. Label Weight
 * 5. Label Leading
 *
 */

.tag {
  display: inline-block;
  border-radius: 1.2rem;
  padding: 0.25rem 1rem;
  background-color: #4a4a4a;
  color: #ffffff; }

/* Colors */

.tag--base {
  color: #4a4a4a;
  background-color: rgba(74, 74, 74, 0.15); }


.tag--canvas {
  color: #fafafa;
  background-color: rgba(250, 250, 250, 0.15); }


.tag--white {
  color: #ffffff;
  background-color: rgba(255, 255, 255, 0.15); }


.tag--alpha {
  color: #ea4d52;
  background-color: rgba(234, 77, 82, 0.15); }


.tag--beta {
  color: #638db4;
  background-color: rgba(99, 141, 180, 0.15); }


.tag--gamma {
  color: #3e5168;
  background-color: rgba(62, 81, 104, 0.15); }


.tag--dark {
  color: #777777;
  background-color: rgba(119, 119, 119, 0.15); }


.tag--mid {
  color: #9b9b9b;
  background-color: rgba(155, 155, 155, 0.15); }


.tag--light {
  color: #d8d8d8;
  background-color: rgba(216, 216, 216, 0.15); }


.tag--shade {
  color: #dedede;
  background-color: rgba(222, 222, 222, 0.15); }


.tag--success {
  color: #aad091;
  background-color: rgba(170, 208, 145, 0.15); }


.tag--warning {
  color: #efbc68;
  background-color: rgba(239, 188, 104, 0.15); }


.tag--error {
  color: #d17580;
  background-color: rgba(209, 117, 128, 0.15); }


.tag--info {
  color: #9cc9df;
  background-color: rgba(156, 201, 223, 0.15); }


.tag--facebook {
  color: #3b5998;
  background-color: rgba(59, 89, 152, 0.15); }


.tag--twitter {
  color: #1da1f2;
  background-color: rgba(29, 161, 242, 0.15); }


.tag--linkedin {
  color: #0077b5;
  background-color: rgba(0, 119, 181, 0.15); }

/*
 * Tooltip:
 *
 * Tooltips are for displaying small pieces of contextual information, usually when hovering
 * the parent element.
 */
/*
 * Tooltip Config
 *
 * 1. Colors
 * 2. Font Size
 * 3. Border Radius
 * 4. Sizes
 * 5. Margin (distance from parent)
 * 6. Tail Size
 * 7. Enable Default Transitions
 *
 */

.tooltip {
  position: absolute;
  margin: 0;
  padding: 0.33rem 0.66rem;
  background-color: #4a4a4a;
  color: #ffffff;
  border-radius: 1.2rem;
  pointer-events: none;
  font-size: 12px;
  white-space: nowrap;
  line-height: 1; }
  
  .tooltip:before {
    content: '';
    position: absolute; }

/* Directions */

.tooltip--up,
.tooltip--down {
  left: 50%;
  transform: translateX(-50%); }
  
  .tooltip--up:before,
  .tooltip--down:before {
    left: 50%;
    transform: translateX(-50%); }


.tooltip--left,
.tooltip--right {
  top: 50%;
  transform: translateY(-50%); }
  
  .tooltip--left:before,
  .tooltip--right:before {
    top: 50%;
    transform: translateY(-50%); }


.tooltip--up {
  bottom: calc(100% + 0.2rem); }
  
  .tooltip--up:before {
    border-style: solid;
    height: 0;
    width: 0;
    border-color: #4a4a4a transparent transparent;
    border-width: 6px 5px 0;
    top: 100%; }


.tooltip--right {
  left: calc(100% + 0.2rem); }
  
  .tooltip--right:before {
    border-style: solid;
    height: 0;
    width: 0;
    border-color: transparent #4a4a4a transparent transparent;
    border-width: 5px 6px 5px 0;
    right: calc(100% - 1px); }


.tooltip--down {
  top: calc(100% + 0.2rem); }
  
  .tooltip--down:before {
    border-style: solid;
    height: 0;
    width: 0;
    border-color: transparent transparent #4a4a4a;
    border-width: 0 5px 6px;
    bottom: 100%; }


.tooltip--left {
  right: calc(100% + 0.2rem); }
  
  .tooltip--left:before {
    border-style: solid;
    height: 0;
    width: 0;
    border-color: transparent transparent transparent #4a4a4a;
    border-width: 5px 0 5px 6px;
    left: calc(100% - 1px); }

/* Parent Helper Class */

._has-tooltip {
  position: relative; }
  
  ._has-tooltip .tooltip {
    opacity: 0; }
  
  ._has-tooltip:hover .tooltip {
    opacity: 1; }

/*
 * 7. Components
 * Components are composable, multi-element pieces of UI.
 */
/*
 * Alert
 * Alert boxes are for drawing attention to important information.
 */
/*
 * Alert Config
 *
 * 1. Colors
 * 2. Borders
 * 3. Sizes
 * 4. Shadows
 *
 */

.alert {
  position: relative;
  background-color: #ffffff;
  border-radius: 0.5rem;
  padding: 0.8rem 0.8rem 0.8rem calc(0.8rem + 4px);
  box-shadow: 0 30px 30px 0 rgba(74, 74, 74, 0.125);
  fill: #4a4a4a; }
  
  .alert:before {
    content: '';
    width: 4px;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: #4a4a4a;
    border-top-left-radius: 0.5rem;
    border-bottom-left-radius: 0.5rem; }

/* Colors */

.alert--base {
  fill: #4a4a4a; }
  
  .alert--base:before {
    background-color: #4a4a4a; }


.alert--canvas {
  fill: #fafafa; }
  
  .alert--canvas:before {
    background-color: #fafafa; }


.alert--white {
  fill: #ffffff; }
  
  .alert--white:before {
    background-color: #ffffff; }


.alert--alpha {
  fill: #ea4d52; }
  
  .alert--alpha:before {
    background-color: #ea4d52; }


.alert--beta {
  fill: #638db4; }
  
  .alert--beta:before {
    background-color: #638db4; }


.alert--gamma {
  fill: #3e5168; }
  
  .alert--gamma:before {
    background-color: #3e5168; }


.alert--dark {
  fill: #777777; }
  
  .alert--dark:before {
    background-color: #777777; }


.alert--mid {
  fill: #9b9b9b; }
  
  .alert--mid:before {
    background-color: #9b9b9b; }


.alert--light {
  fill: #d8d8d8; }
  
  .alert--light:before {
    background-color: #d8d8d8; }


.alert--shade {
  fill: #dedede; }
  
  .alert--shade:before {
    background-color: #dedede; }


.alert--success {
  fill: #aad091; }
  
  .alert--success:before {
    background-color: #aad091; }


.alert--warning {
  fill: #efbc68; }
  
  .alert--warning:before {
    background-color: #efbc68; }


.alert--error {
  fill: #d17580; }
  
  .alert--error:before {
    background-color: #d17580; }


.alert--info {
  fill: #9cc9df; }
  
  .alert--info:before {
    background-color: #9cc9df; }


.alert--facebook {
  fill: #3b5998; }
  
  .alert--facebook:before {
    background-color: #3b5998; }


.alert--twitter {
  fill: #1da1f2; }
  
  .alert--twitter:before {
    background-color: #1da1f2; }


.alert--linkedin {
  fill: #0077b5; }
  
  .alert--linkedin:before {
    background-color: #0077b5; }

/*
 * Dialog
 *
 * A dialog is for displaying and prioritising contextual content or functionality, over the top of
 * the main flow of content
 */
/*
 * Tooltip Config
 *
 * 1. Sizes
 * 2. Background Color
 * 3. Border Radii
 * 2. Enable Default Transitions
 *
 */

.dialog {
  background-color: #ffffff;
  border-radius: 0.25rem;
  max-width: 60rem;
  max-height: 95vh; }


.dialog__header {
  padding: 0.8rem 0.8rem 0;
  justify-self: flex-start; }


.dialog__body {
  padding: 0.8rem;
  justify-self: stretch;
  max-height: 70vh;
  overflow-y: auto; }


.dialog__footer {
  padding: 0 0.8rem 0.8rem;
  justify-self: flex-end; }

._a_dialog-enter {
  transform: translateY(-60%) translateX(-50%);
  opacity: 0; }
  ._a_dialog-enter._a_dialog-enter-active {
    transform: translateY(-50%) translateX(-50%);
    opacity: 1;
    transition: all 750ms cubic-bezier(0.23, 1, 0.32, 1); }

._a_dialog-exit {
  transform: translateY(-50%) translateX(-50%);
  opacity: 1; }
  ._a_dialog-exit._a_dialog-exit-active {
    transform: translateY(-55%) translateX(-50%);
    opacity: 0;
    transition: all 300ms cubic-bezier(0.6, 0.04, 0.98, 0.335); }

/*
 * Drilldown
 * Drilldowns are a way of navigating horizontally through multiple panes of content i.e. a navigation with
 * nested sub-sections.
 */

.drilldown {
  position: relative;
  overflow: hidden; }


.drilldown__pane {
  position: relative;
  top: 0;
  left: 0;
  width: 100%;
  background-color: #ffffff;
  box-shadow: 0 30px 0 rgba(0, 0, 0, 0.25), 0 0 5px 0 rgba(0, 0, 0, 0.125); }

._a_drilldown--back-enter, ._a_drilldown--back-appear {
  transform: translateX(-5%);
  z-index: 90;
  position: absolute; }
  ._a_drilldown--back-enter._a_drilldown--back-enter-active, ._a_drilldown--back-enter._a_drilldown--back-appear-active, ._a_drilldown--back-appear._a_drilldown--back-enter-active, ._a_drilldown--back-appear._a_drilldown--back-appear-active {
    transform: translateX(0%);
    transition: all 500ms ease-out; }
  ._a_drilldown--back-enter._a_drilldown--back-enter-done, ._a_drilldown--back-enter._a_drilldown--back-appear-done, ._a_drilldown--back-appear._a_drilldown--back-enter-done, ._a_drilldown--back-appear._a_drilldown--back-appear-done {
    position: relative; }

._a_drilldown--back-exit {
  position: relative;
  transform: translateX(0%);
  z-index: 100; }
  ._a_drilldown--back-exit._a_drilldown--back-exit-active {
    transform: translateX(100%);
    transition: all 500ms cubic-bezier(0.6, 0.04, 0.98, 0.335); }
  ._a_drilldown--back-exit._a_drilldown--back-exit-done {
    position: absolute; }

._a_drilldown--next-enter, ._a_drilldown--next-appear {
  transform: translateX(100%);
  z-index: 100;
  position: absolute; }
  ._a_drilldown--next-enter._a_drilldown--next-enter-active, ._a_drilldown--next-enter._a_drilldown--next-appear-active, ._a_drilldown--next-appear._a_drilldown--next-enter-active, ._a_drilldown--next-appear._a_drilldown--next-appear-active {
    transform: translateX(0%);
    transition: all 750ms cubic-bezier(0.23, 1, 0.32, 1); }
  ._a_drilldown--next-enter._a_drilldown--next-enter-done, ._a_drilldown--next-enter._a_drilldown--next-appear-done, ._a_drilldown--next-appear._a_drilldown--next-enter-done, ._a_drilldown--next-appear._a_drilldown--next-appear-done {
    position: relative; }

._a_drilldown--next-exit {
  position: relative;
  transform: translateX(0%);
  z-index: 90; }
  ._a_drilldown--next-exit._a_drilldown--next-exit-active {
    transform: translateX(-5%);
    transition: all 500ms ease-out; }
  ._a_drilldown--next-exit._a_drilldown--back-exit-done {
    position: absolute; }

/*
 * Flyout
 * Use a flyout when you need to bring in some supplementary content which, by default, lives 'off canvas'.
 * Common use cases are for slide-in menus or notification panels.
 */

.flyout {
  position: fixed;
  top: 0;
  right: 0;
  height: 100%;
  background-color: #ffffff;
  padding: 0.8rem;
  width: 25em;
  max-width: 95vw;
  border: none; }


.flyout__close {
  position: absolute;
  top: 0.8rem;
  right: 0.8rem;
  cursor: pointer; }


.flyout--left {
  left: 0;
  right: auto;
  border-right-color: #4a4a4a;
  border-left-color: transparent; }

._a_flyout-enter {
  transform: translateX(100%);
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0); }
  ._a_flyout-enter._a_flyout-enter-active {
    transform: translateX(0);
    box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.125);
    transition: all 750ms cubic-bezier(0.23, 1, 0.32, 1); }

._a_flyout-enter-done {
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.125); }

._a_flyout-exit {
  transform: translateX(0);
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.125); }
  ._a_flyout-exit._a_flyout-exit-active {
    transform: translateX(100%);
    box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0);
    transition: all 300ms cubic-bezier(0.6, 0.04, 0.98, 0.335); }

/* Left-hand flyout transitions */
._a_flyout--left-enter {
  transform: translateX(-100%);
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0); }
  ._a_flyout--left-enter._a_flyout--left-enter-active {
    transform: translateX(0);
    box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.125);
    transition: all 750ms cubic-bezier(0.23, 1, 0.32, 1); }

._a_flyout--left-enter-done {
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.125); }

._a_flyout--left-exit {
  transform: translateX(0);
  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.125); }
  ._a_flyout--left-exit._a_flyout--left-exit-active {
    transform: translateX(-100%);
    box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0);
    transition: all 300ms cubic-bezier(0.6, 0.04, 0.98, 0.335); }

/*
 * Hero:
 *
 * Large page headers containing a background color or background image.
 */
/*
 * Button Config
 *
 * 1. Colors
 * 2. Border Radius
 * 3. Sizes
 * 4. Label Weight
 * 5. Label Leading
 *
 */

.hero {
  position: relative;
  padding: 4.8rem 0; }

/* Colors */

.hero--base {
  background-color: #4a4a4a; }


.hero--canvas {
  background-color: #fafafa; }


.hero--white {
  background-color: #ffffff; }


.hero--alpha {
  background-color: #ea4d52; }


.hero--beta {
  background-color: #638db4; }


.hero--gamma {
  background-color: #3e5168; }


.hero--dark {
  background-color: #777777; }


.hero--mid {
  background-color: #9b9b9b; }


.hero--light {
  background-color: #d8d8d8; }


.hero--shade {
  background-color: #dedede; }


.hero--success {
  background-color: #aad091; }


.hero--warning {
  background-color: #efbc68; }


.hero--error {
  background-color: #d17580; }


.hero--info {
  background-color: #9cc9df; }


.hero--facebook {
  background-color: #3b5998; }


.hero--twitter {
  background-color: #1da1f2; }


.hero--linkedin {
  background-color: #0077b5; }

/* Sizes */

.hero--small {
  padding: 3.2rem 0; }


.hero--normal {
  padding: 4.8rem 0; }


.hero--normal-offet {
  padding: 7.2rem 0 2.4rem; }


.hero--fullheight {
  min-height: 100vh; }

/*
 * Overlay
 * Overlays sit over the top of the main flow of content, locking off
 * interactions with the main flow until the focused content on the top
 * of the Overlay is addressed.
 */
/*
 * Overlay Config
 *
 * 1. Colors
 *
 */

.overlay {
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%; }


.overlay__background {
  background-color: rgba(74, 74, 74, 0.25); }

/* Background Colors */

.overlay__background--base {
  background-color: rgba(74, 74, 74, 0.25); }


.overlay__background--canvas {
  background-color: rgba(250, 250, 250, 0.25); }


.overlay__background--white {
  background-color: rgba(255, 255, 255, 0.25); }


.overlay__background--alpha {
  background-color: rgba(234, 77, 82, 0.25); }


.overlay__background--beta {
  background-color: rgba(99, 141, 180, 0.25); }


.overlay__background--gamma {
  background-color: rgba(62, 81, 104, 0.25); }


.overlay__background--dark {
  background-color: rgba(119, 119, 119, 0.25); }


.overlay__background--mid {
  background-color: rgba(155, 155, 155, 0.25); }


.overlay__background--light {
  background-color: rgba(216, 216, 216, 0.25); }


.overlay__background--shade {
  background-color: rgba(222, 222, 222, 0.25); }


.overlay__background--success {
  background-color: rgba(170, 208, 145, 0.25); }


.overlay__background--warning {
  background-color: rgba(239, 188, 104, 0.25); }


.overlay__background--error {
  background-color: rgba(209, 117, 128, 0.25); }


.overlay__background--info {
  background-color: rgba(156, 201, 223, 0.25); }


.overlay__background--facebook {
  background-color: rgba(59, 89, 152, 0.25); }


.overlay__background--twitter {
  background-color: rgba(29, 161, 242, 0.25); }


.overlay__background--linkedin {
  background-color: rgba(0, 119, 181, 0.25); }


.overlay__close {
  position: absolute;
  top: 1.6rem;
  right: 1.6rem;
  cursor: pointer; }

/*
 * Read More (Has JS dependency)
 * The read more pattern adds a max-height onto a target container, along with a button to remove
 * the max-height and expand the container to it's natural height. Useful for showing only an excerpt
 * of long blocks of copy until the user requests to read in full.
 */

.read-more {
  position: relative;
  overflow: hidden; }
  
  .read-more._is-collapsed {
    max-height: 10em; }
    
    .read-more._is-collapsed:before,
    .read-more._is-collapsed .read-more__trigger {
      opacity: 1; }
  
  .read-more:before {
    background-image: linear-gradient(rgba(255, 255, 255, 0), #ffffff);
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 10em;
    opacity: 0;
    pointer-events: none; }


.read-more__trigger {
  position: absolute;
  bottom: 0.8rem;
  left: 50%;
  transform: translateX(-50%);
  opacity: 0; }

/*
 * Table:
 *
 * A simple out-of-the-box table style, including automatic horizontal scrolling
 * for narrow viewports.
 */
/*
 * Table Config
 *
 * 1. Table Background
 * 2. Header Background
 * 2. Borders
 * 3. Padding
 *
 */

.table {
  width: 100%;
  table-layout: fixed;
  overflow: auto;
  background-color: #ffffff; }
  
  .table th {
    background-color: #9b9b9b; }
  
  .table th,
  .table td {
    padding: 0.8rem; }
  
  .table tr {
    border-bottom: 1px solid #dedede; }

/*
 * Tabs
 *
 * For showing and hiding content panels based on a selected link/tab.
 */

.tabs__overflow {
  position: relative; }
  
  .tabs__overflow:before {
    content: '';
    width: 7.5rem;
    height: 100%;
    height: calc(100% - 2px);
    position: absolute;
    top: 0;
    right: 0;
    pointer-events: none;
    z-index: 1;
    background-image: linear-gradient(transparent, #ffffff, "to right"); }
  
  .tabs__overflow:after {
    content: '';
    width: 100%;
    height: 2px;
    background: #d8d8d8;
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: -1; }


.tabs__buttons {
  display: none;
  overflow-y: auto; }
  .tabs._is-active
  .tabs__buttons {
    display: flex; }
  
  .tabs__buttons + .tabs__panels {
    margin-top: 0.8rem; }


.tabs__button {
  appearance: none;
  -webkit-appearance: none;
  border: 0;
  background: transparent;
  color: #4a4a4a;
  padding: 0.8rem;
  position: relative;
  white-space: nowrap;
  cursor: pointer; }
  
  .tabs__button:after {
    content: '';
    width: 0%;
    height: 2px;
    background: #4a4a4a;
    position: absolute;
    bottom: 0;
    left: 50%;
    opacity: 0; }
  
  .tabs__button:hover:after {
    opacity: 0.5;
    left: 0;
    width: 100%; }
  
  .tabs__button._is-active:after {
    opacity: 1;
    left: 0;
    width: 100%; }
  
  .tabs__button:focus {
    outline: none; }
  
  .tabs__button + .tabs__button {
    margin-left: 0.8rem; }


.tabs__panel + .tabs__panel {
  margin-top: 0.8rem; }

.tabs._is-active
.tabs__panel {
  display: none;
  margin-top: 0; }
  .tabs._is-active
  .tabs__panel._is-visible {
    display: block; }

/*
 * 8. Forms
 * Composable, configurable styles for forms and form fields.
 */
/*
 * Checkboxes
 * Styles for Checkboxes.
 *
 * CHECKBOX LEFT
 * <div class="form-check">
 *    <input id="abc" name="abc" type="checkbox" class="form-check__input _is-visually-hidden">
 *    <label for="abc" class="form-check__faux"></label>
 *    <label for="abc" class="form-check__label">Check this box for fun</label>
 * </div>
 *
 * CHECKBOX RIGHT
 * <div class="form-check">
 *    <label for="abc" class="form-check__label">Check this box for fun</label>
 *    <input id="abc" name="abc" type="checkbox" class="form-check__input _is-visually-hidden">
 *    <label for="abc" class="form-check__faux"></label>
 * </div>
 */
.form-check {
  display: flex; }

.form-check__faux {
  border: 1px solid #4a4a4a;
  display: block;
  height: 0.8rem;
  position: relative;
  width: 0.8rem; }
  .form-check__faux:before {
    background: transparent;
    content: '';
    left: 50%;
    height: 0.4rem;
    position: absolute;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
    width: 0.4rem; }

.form-check__input:focus + .form-check__faux {
  box-shadow: 0 0 12px 0 rgba(62, 81, 104, 0.9); }

.form-check__input:checked + .form-check__faux {
  border-color: #ea4d52; }
  .form-check__input:checked + .form-check__faux:before {
    background: #ea4d52; }

.form-check__input:disabled + .form-check__faux {
  cursor: not-allowed; }

.form-check__label {
  margin-left: 0;
  margin-right: 0.4rem; }

.form-check__faux + .form-check__label {
  margin-left: 0.4rem; }

/*
 * File
 * Styles for File upload inputs.
 *
 *       <div class="form-file">
 *           <label class="form-label" for="file">File</label>
 *           <input class="form-input form-file__input" id="file" name="file" type="file" value="">
 *       </div>
 */
.form-file > .form-file__input {
  width: 100%;
  padding: 0.4rem;
  background-color: #fafafa;
  border: 1px dashed #4a4a4a;
  text-align: center; }

/*
 * Form
 * Small classes concerned with establishing rhythm and positioning contexts within a form.
 */
.form__input {
  position: relative; }

/*
* Form block
* Form blocks are for visually grouping smaller form inputs such as sets of radio buttons.
*/
.field__group {
  border-radius: 0.25rem; }

.block__item {
  padding: 0.8rem; }
  .block__item + .block__item {
    border-top: 1px solid #d8d8d8; }

/*
	* Form input
	* The .form__input class wraps inputs in a postioning context, while the __addon child
	* handles vertical spacing of input addons i.e. validation message wrappers, password strength
	* meters.
	*/
.form__input__addon {
  margin-top: 0.8rem; }

/*
 * Input:
 * Generic 'themes' for most character-based input types;
 *
 *  <input class="form-input" id="from-name" type="text" name="fromName" value="">
 *
 *  <textarea class="form-input" cols="40" id="message" name="message" rows="10"></textarea>
 *
 */
.form-input {
  appearance: none;
  -webkit-appearance: none;
  border: 1px solid #4a4a4a;
  display: block;
  padding: 0.4rem;
  width: 100%; }
  .form-input::-ms-reveal, .form-input::-ms-clear {
    display: none; }
  .form-input:focus {
    border-color: #ea4d52;
    outline: none; }
  .form-input::placeholder {
    color: #9b9b9b; }
  .form-input._has-icon-left {
    padding-left: 1.6rem; }
  .form-input._has-icon-right {
    padding-right: 1.6rem; }

.form-input--blocky {
  background-color: #fafafa;
  border: 2px solid #fafafa; }

.form-input--minimal {
  background-color: transparent;
  border-top: none;
  border-left: none;
  border-right: none;
  border-bottom: 1px solid #4a4a4a; }
  .form-input--minimal:focus {
    border-color: #ea4d52; }

/*
 * Radio
 * Styles for Radio Buttons.
 *
 * RADIO LEFT
 * <div class="form-radio">
 *    <input id="abc" name="abc" type="radio" class="form-radio__input _is-visually-hidden">
 *    <label for="abc" class="form-radio__faux"></label>
 *    <label for="abc" class="form-radio__label">Check this box for fun</label>
 * </div>
 *
 * RADIO RIGHT
 * <div class="form-radio">
 *    <label for="abc" class="form-radio__label">Check this box for fun</label>
 *    <input id="abc" name="abc" type="radio" class="form-radio__input _is-visually-hidden">
 *    <label for="abc" class="form-radio__faux"></label>
 * </div>
 */
.form-radio {
  display: flex; }

.form-radio__faux {
  border: 1px solid #4a4a4a;
  border-radius: 100%;
  display: block;
  height: 0.8rem;
  position: relative;
  width: 0.8rem; }
  .form-radio__faux:before {
    background: transparent;
    border-radius: 100%;
    content: '';
    left: 50%;
    height: 0.4rem;
    position: absolute;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
    width: 0.4rem; }

.form-radio__input:focus + .form-radio__faux {
  box-shadow: 0 0 12px 0 rgba(62, 81, 104, 0.9); }

.form-radio__input:checked + .form-radio__faux {
  border-color: #ea4d52; }
  .form-radio__input:checked + .form-radio__faux:before {
    background: #ea4d52; }

.form-radio__input:disabled + .form-radio__faux {
  cursor: not-allowed; }

.form-radio__label {
  margin-left: 0;
  margin-right: 0.4rem; }

.form-radio__faux + .form-radio__label {
  margin-left: 0.4rem; }

/*
 * Selects
 *
 *
 *      <div class="form-select form-select--minimal">
 *           <label for="testselect">Test Label</label>
 *           <div class="form-select__wrapper">
 *               <select class="form-select__select" id="testselect" name="test">
 *                   <option value="test">Test 1</option>
 *                   <option value="test2">Test 2</option>
 *                   <option value="test3">Test 3</option>
 *                   <option value="test4">Test 4</option>
 *               </select>
 *               <label class="form-select__icon">
 *                   V
 *               </label>
 *           </div>
 *       </div>
 */
.form-select {
  width: 100%; }

.form-select__wrapper {
  position: relative;
  width: 100%; }

.form-select__select {
  appearance: none;
  -webkit-appearance: none;
  background: #fafafa;
  border: 1px solid #4a4a4a;
  border-radius: 0;
  padding: 0.28rem;
  width: 100%; }

.form-select--minimal .form-select__select {
  border-left-width: 0;
  border-right-width: 0;
  border-top-width: 0; }

.form-select__icon {
  height: 0.8rem;
  position: absolute;
  right: 0.4rem;
  top: 50%;
  transform: translateY(-50%);
  width: 0.8rem; }

/*
 * Text Inputs:
 * Wrapper for Text inputs including text area
 *
 *
 *       <div class="form-text form-text--has-right-icon">
 *           <label class="form-label" for="from-name">Your Name</label>
 *           <div class="form-text__wrapper form-text--has-right-icon">
 *               <input class="form-input" id="from-name" type="text" name="fromName" value="">
 *               <label class="form-text__icon">
 *                   V
 *               </label>
 *           </div>
 *       </div>
 *
 *       <div class="form-text form-text--has-right-icon">
 *           <label class="form-label" for="from-name">Your Name</label>
 *           <div class="form-text__wrapper form-text--has-right-icon">
 *               <textarea class="form-input" cols="40" id="message" name="message" rows="10"></textarea>
 *               <label class="form-text__icon">
 *                   V
 *               </label>
 *           </div>
 *       </div>
 */
.form-text {
  width: 100%; }

.form-text__wrapper {
  position: relative;
  width: 100%; }

.form-text__wrapper--has-right-icon > input {
  padding-right: 1.6rem; }

.form-text__wrapper--has-left-icon > input {
  padding-left: 1.6rem; }

.form-text__icon {
  height: 0.8rem;
  position: absolute;
  right: 0.4rem;
  top: 50%;
  transform: translateY(-50%);
  width: 0.8rem; }

.form-text__icon--left {
  left: 0.4rem;
  right: 0; }

/*
 * Switchbox
 * Styles for a checkbox that visually looks and acts like a faux switch.
 *
 * TOGGLE LEFT
 * <div class="form-toggle">
 *    <input id="abc" name="abc" type="checkbox" class="form-toggle__input _is-visually-hidden">
 *    <label for="abc" class="form-toggle__faux"></label>
 *    <label for="abc" class="form-toggle__label">Check this box for fun</label>
 * </div>
 *
 * TOGGLE RIGHT
 * <div class="form-toggle">
 *    <label for="abc" class="form-toggle__label">Check this box for fun</label>
 *    <input id="abc" name="abc" type="checkbox" class="form-toggle__input _is-visually-hidden">
 *    <label for="abc" class="form-toggle__faux"></label>
 * </div>
 */
.form-toggle {
  font-size: 1em; }

.form-toggle__label {
  line-height: 1; }

.form-toggle__faux {
  cursor: pointer;
  display: block;
  width: 3em;
  height: 1.5em;
  border-radius: 0.75em;
  border: solid 1px #d8d8d8;
  background-color: #d8d8d8;
  position: relative; }
  .form-toggle__faux:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    width: calc(1.5em - 2px);
    height: calc(1.5em - 2px);
    border-radius: calc(0.75em - 1px);
    box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.2);
    background-color: #ffffff; }

.form-toggle__input:checked + .form-toggle__faux {
  background-color: #ea4d52;
  border-color: #ea4d52; }
  .form-toggle__input:checked + .form-toggle__faux:after {
    left: calc(100% - (1.5em - 2px)); }

.form-toggle__input:disabled + .form-toggle__check {
  cursor: not-allowed; }

/*
 * 9. Utilities
 * Utilities are Tachyon-style utility classes which require no configuration,
 * allowing for quickly modifying an existing element.
 */
/*
 * Animation:
 *
 * Some common plug-and-play transitions for use on any element.
 */

._a_simple-transition,
.form-check__faux,
.form-radio__faux {
  transition: 0.5s all ease-out; }

/*
 * Background:
 * Utility styles for background cover images, fixed backgrounds, etc.
 */

.hero,
.background--cover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat; }


.background--fixed {
  background-attachment: fixed;
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat; }

.border {
  border-color: #4a4a4a;
  border-style: solid;
  border-width: 0; }

.border--dotted {
  border-style: dotted; }

.border--dashed {
  border-style: dashed; }

.border--all {
  border-width: 1px; }

.border--top {
  border-top-width: 1px; }

.border--right {
  border-right-width: 1px; }

.border--bottom {
  border-bottom-width: 1px; }

.border--left {
  border-left-width: 1px; }


.no-radius {
  border-radius: 0; }


.corner-radius {
  border-radius: 0.25rem; }


.round-radius {
  border-radius: 50%; }

/*
 * Clearfix
 *
 * Utility class for clearing down pesky floats.
 */

.clearfix:after {
  clear: both;
  content: '';
  display: block; }

/*
 * Clearfix
 *
 * Utility class for quickly setting an element's display property.
 */

.display--inline {
  display: inline; }


.display--inline-block {
  display: inline-block; }


.display--block {
  display: block; }

/*
 * Some layout classes, to quickly utilise the Flexible Box Model (Flexbox) to lay linear items out.
 */
.flex,
.dialog,
.block__item,
.form-toggle,
.form-toggle__label {
  display: flex; }

.flex--wrap {
  flex-wrap: wrap; }

.flex--row {
  flex-direction: row; }

.flex--column,
.dialog {
  flex-direction: column; }

.flex--grow {
  flex-grow: 1; }

.flex--space-between,
.block__item {
  justify-content: space-between; }

.flex--space-around {
  justify-content: space-around; }

.flex--justify-end {
  justify-content: flex-end; }

.flex--justify-start {
  justify-content: flex-start; }

.flex--justify-center {
  justify-content: center; }

.flex--align-end {
  align-items: flex-end; }

.flex--align-start {
  align-items: flex-start; }

.flex--align-center,
.form-toggle__label {
  align-items: center; }

.flex--paced-left > * {
  margin-left: 0.8rem; }
  .flex--paced-left > *:first-child {
    margin-left: 0; }

.flex--paced-right > *,
.form-toggle > * {
  margin-right: 0.8rem; }
  .flex--paced-right > *:last-child,
  .form-toggle > *:last-child {
    margin-right: 0; }

/*
 * Quick seasonings for throwing position:relative or similar onto an element
 */

.position--static {
  position: static; }


.position--relative {
  position: relative; }


.position--absolute {
  position: relative; }


.position--fixed {
  position: fixed; }


.position--sticky {
  position: fixed; }
  @supports (position: sticky) {
    
    .position--sticky {
      position: -webkit-sticky;
      position: sticky;
      top: 0; } }

/*
 * Text Alignment:
 *
 * Utility classes for quickly aligning text content.
 */

.text-align--left {
  text-align: left; }


.text-align--center {
  text-align: center; }


.text-align--right {
  text-align: right; }

/*
 * Vertical Alignment:
 *
 * Utility classes for quickly aligning content.
 */

.vertical-align--middle {
  vertical-align: middle; }
  
  .vertical-align--middle + * {
    vertical-align: middle; }

/*
 * Visual
 *
 * Utility classes for visually hiding, showing and moving elements in a screen reader accessible manner
 */
._is-visually-hidden {
  display: block;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(1px);
  white-space: nowrap;
  position: absolute; }

.display--block {
  display: block; }

/*
 * Project SCSS Modules
 *
 * All project-level SCSS can be loaded in from here on out.
 *
 */
/*
 * Shame
 * A temporary home for smelly CSS we will clean up later.
 */
/**
 * _shame.scss
 *
 * Need to write something hacky or smelly that you honestly intend to re-factor later? Dump it in here. But tidy up after yourself!
 *
 */
.foundry__section {
  display: grid;
  grid-template-columns: 1fr 3fr; }

#avatar-demo .avatar {
  margin: 0 2rem 2rem 0; }

#buttons-demo .button {
  margin: 0 2rem 2rem 0; }

#cards-demo {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 2rem; }

#icons-demo .icon {
  margin: 0 2rem 2rem 0; }

#tags-demo .tag {
  margin: 0 1rem 1rem 0; }

#tooltips-demo .button {
  margin: 0 1rem 1rem 0; }

#tooltips-demo .tooltip {
  z-index: 1; }

#alerts-demo {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 2rem; }

body {
  padding-bottom: 4.8rem; }
